# -*- mode: gotplhtml *-
# vi: set ft=gotplhtml :

{% raw %}
global
  log /dev/log    local0
  log /dev/log    local1 notice
  chroot /var/lib/haproxy
  user haproxy
  group haproxy
  daemon

  # Default SSL material locations
  # ca-base /etc/ssl/certs
  # crt-base /etc/ssl/private

  # Default ciphers to use on SSL-enabled listening sockets.
  # For more information, see ciphers(1SSL).
  # ssl-default-bind-ciphers kEECDH+aRSA+AES:kRSA+AES:+AES256:RC4-SHA:!kEDH:!LOW:!EXP:!MD5:!aNULL:!eNULL

defaults
  log     global
  mode    http
  option  httplog
  option  dontlognull
  option  redispatch
  option  http-server-close
  retries 3
  maxconn 2000
  timeout connect 5s
  timeout client 30s
  timeout client-fin 30s
  timeout server 30s
  timeout tunnel  24h

  errorfile 400 /etc/haproxy/errors/400.http
  errorfile 403 /etc/haproxy/errors/403.http
  errorfile 408 /etc/haproxy/errors/408.http
  errorfile 500 /etc/haproxy/errors/500.http
  errorfile 502 /etc/haproxy/errors/502.http
  errorfile 503 /etc/haproxy/errors/503.http
  errorfile 504 /etc/haproxy/errors/504.http

listen stats
  bind 127.0.0.1:9090
  balance
  mode http
  stats enable
  stats auth admin:admin

{{ if $services := .Services }}
frontend http-in
  bind *:80
  {{ range $index, $app := .Apps }} {{ if hasKey $services $app.Id }} {{ $service := getService $services $app.Id }}
  use_backend {{ $app.EscapedId }}-cluster if {{ $service.Acl }} {{ end }} {{ end }}
{{ end }}

{{ range $index, $app := .Apps }}
backend {{ $app.EscapedId }}-cluster
  {{ if and $app.HealthCheckPath (ne $app.HealthCheckPath ".") }}
  option httpchk GET {{ $app.HealthCheckPath }}
  {{ end }}
  balance leastconn
  option httpclose
  option forwardfor
  {{ range $page, $task := .Tasks }}
  server {{ $app.EscapedId}}-{{ $task.Host }}-{{ $task.Port }} {{ $task.Host }}:{{ $task.Port }} {{ if $app.HealthCheckPath }} check inter 2s {{ end }} {{ end }}
{{ end }}

{{ range $index, $app := .Apps }} {{ if ne $app.ServicePort 0 }}
listen {{ $app.EscapedId }}_{{ $app.ServicePort }}
  bind *:{{ $app.ServicePort }}
  mode tcp
  {{ if and $app.HealthCheckPath (ne $app.HealthCheckPath ".") }}
  option httpchk GET {{ $app.HealthCheckPath }}
  {{ end }}
  balance leastconn
  option forwardfor
  {{ range $page, $task := .Tasks }}
  server {{ $app.EscapedId}}-{{ $task.Host }}-{{ $task.Port }} {{ $task.Host }}:{{ $task.Port }} {{ if $app.HealthCheckPath }} check inter 2s {{ end }} {{ end }}
{{ end }} {{ end }}
{% endraw %}

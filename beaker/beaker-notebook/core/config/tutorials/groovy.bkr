{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "shellID": null
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "shellID": null
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "shellID": "5B33CA48BB144009B7D85113F6193C52",
            "imports": "",
            "supplementalClassPath": ""
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "shellID": null,
            "jsSetting2": "",
            "jsSetting1": ""
        },
        {
            "name": "R",
            "plugin": "R",
            "shellID": "5ce9b0fe-c0b1-49e1-87d3-455cd4c9d143"
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "shellID": "83b49d86-4f0b-4a4d-bdaf-19654cc6c0e1"
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "Groovy basics",
            "collapsed": false
        },
        {
            "id": "markdownWEsxB3",
            "type": "markdown",
            "body": "This notebook is a brief introduction to Groovy. It assumes a general understanding of Java.",
            "mode": "preview"
        },
        {
            "id": "code001",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//semicolons are optional\ndef str = \"look, no semicolon!\""
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 62
            }
        },
        {
            "id": "codeapvWRa",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//parentheses are optional\nSystem.out.println \"hey!\"\nprintln \"no System.out either!\""
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 138
            }
        },
        {
            "id": "code6Hw88v",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//exception handling is optional\n\n//this wouldn't compile in Java\ndef r = new FileReader(\"\")"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 46
            }
        },
        {
            "id": "codeYA0hzd",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//== is .equals()\n\n//don't do this in Java!\n\"A\" == \"ABC\".substring(0,1)"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 66
            }
        },
        {
            "id": "codeW8rmdq",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//decimals are big\n\n1.0.getClass()"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 82
            }
        },
        {
            "id": "codemxtCOw",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "1 && true //nonzero is true"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 73
            }
        },
        {
            "id": "codevxLgiE",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "0 && true //0 is false"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 67
            }
        },
        {
            "id": "codeLgdRz3",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "\"\" && true //empyt string is false"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 75
            }
        },
        {
            "id": "codeHCnRSP",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "null && true //null is false"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 62
            }
        },
        {
            "id": "codeeMpGqR",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//Quotes\n\n\"Mixing 'single' and double quotes\"\n'backward \"mixing\" quotes'\n\n\"\"\"Multiline\nquotes\n\"\"\""
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 80
            }
        },
        {
            "id": "codei73N64",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//lists\n\nl = [1,2] //initialization\nl << 3 //adding elements\nl -= 2 //remove\nl += [5,7] //concat\nl[2] //access\nl[-1] //negative indeces"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 86
            }
        },
        {
            "id": "codesK5YMS",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//maps\n\nm = [a:1, b:2] //initialize\nm.c = 3 //add\nm['d'] = 4 //add\nm.a //access\nm['c'] //access"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 97
            }
        },
        {
            "id": "codeTJqURJ",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//closures\n\nc = {a, b ->\n  a + b //return statement optional\n}\n\nc(3,5)"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 112
            }
        },
        {
            "id": "code9iHRwo",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "c = {\n it + 1 //first arg automatically named it \n}\n\nc(2)"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 82
            }
        },
        {
            "id": "code6vyHse",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//iterating collections and closures as arguments\n\ns = ''\n[1,2,3].each {\n   s += it + ' '\n}\ns"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 86
            }
        },
        {
            "id": "codeLpzig0",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": "//collect\n\n[1,2,3].collect {\n\tit + 1 \n}"
            },
            "output": {
                "selectedType": "Hidden",
                "elapsedTime": 88
            }
        }
    ]
}

{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "shellID": null,
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "shellID": null,
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "shellID": "71C80909CDDD41F280E6224557B7BF79",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python",
                    "background": "#EAEAFF"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "shellID": null,
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "shellID": "60f1c0b3-9916-4f83-b400-91332b04350b",
            "view": {
                "cm": {
                    "mode": "r",
                    "background": "#C0CFF0"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "Notebook Namespace",
            "collapsed": false
        },
        {
            "id": "markdowneNyWKM",
            "type": "markdown",
            "body": "Implementation and experimentation towards https://github.com/twosigma/beaker-notebook/issues/89",
            "mode": "preview"
        },
        {
            "id": "sectionk4CosY",
            "type": "section",
            "title": "Python",
            "level": 2,
            "collapsed": false
        },
        {
            "id": "code001",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "import os, urllib, urllib2, json\n\nurl = '127.0.0.1:' + os.environ['beaker_core_port']\npassword_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\npassword_mgr.add_password(None, url, 'beaker', os.environ['beaker_core_password'])\nhandler = urllib2.HTTPBasicAuthHandler(password_mgr)\nopener = urllib2.build_opener(handler)\nurllib2.install_opener(opener)\n\n# the subtlety with this is it returns before it completes.\n# this might be desireable for performance but to avoid weirdness\n# probably want the default to block using similar technique as get\ndef bset(var, val):\n    req = urllib2.Request('http://' + url + '/rest/namespace/set',  \n                          urllib.urlencode({'name': var, 'value': json.dumps(val), 'session':_beaker_session_id}))\n    conn = urllib2.urlopen(req)\n    conn.read()\n\ndef bget(var):\n    req = urllib2.Request('http://' + url + '/rest/namespace/get?' + \n                          urllib.urlencode({'name': var, 'session':_beaker_session_id}))\n    conn = urllib2.urlopen(req)\n    result = json.loads(conn.read())\n    return result['value']\n  \n# in addition to get and set, could probably use an undef method to remove values from the namespace"
            },
            "output": {
                "selectedType": "Hidden",
                "result": "",
                "outputArrived": false,
                "elapsedTime": 35
            }
        },
        {
            "id": "codeHcaNw0",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "bset('s', \"hi momx\")\nbset('b', True)\nbset('i', 99)\nbset('d', 99.9)\nbset('dict', {'with': 'different', 'types': 23.2})"
            },
            "output": {
                "selectedType": "Hidden",
                "result": "",
                "outputArrived": false,
                "elapsedTime": 33
            }
        },
        {
            "id": "codeP6hk18",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "type(bget('b'))"
            },
            "output": {
                "selectedType": "BeakerDisplay",
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<div class=\"out_prompt_overlay prompt\" title=\"click to expand output; double click to hide output\" style=\"display: none;\"></div><div class=\"output\" style=\"display: none;\"></div><div class=\"btn output_collapsed\" title=\"click to expand output\" style=\"display: none;\">. . .</div><div class=\"output_subarea output_text\"><pre>bool</pre></div>"
                },
                "outputArrived": true,
                "elapsedTime": 58
            }
        },
        {
            "id": "sectionso97Zp",
            "type": "section",
            "title": "R",
            "level": 2,
            "collapsed": false
        },
        {
            "id": "code2uVtKX",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "#R - will turn dark blue when plugin loads successfully\nlibrary(RCurl)\nlibrary(RJSONIO)\n\npwarg = paste('beaker:',Sys.getenv(\"beaker_core_password\"),sep='')\n\n# this one isn't done yet\nbset <- function(var, val) {\n  req = paste('http://127.0.0.1:',Sys.getenv(\"beaker_core_port\"),\n           '/rest/namespace/set', sep='')\n  postForm(req, style='POST', name=var, value=val, session=beaker_session_id_,\n        \t\t .opts=list(userpwd=pwarg, httpauth = AUTH_BASIC))\n  return (val)\n}\n\n\nbget <- function(var) {\n  req = paste('http://127.0.0.1:',Sys.getenv(\"beaker_core_port\"),\n              '/rest/namespace/get?name=', var, '&session=', beaker_session_id_, sep='')\n  res = getURL(req, userpwd=pwarg, httpauth = AUTH_BASIC)\n  return (fromJSON(res)$value)\n}"
            },
            "output": {
                "selectedType": "Hidden",
                "result": "",
                "elapsedTime": 494
            }
        },
        {
            "id": "codeaR6jnD",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "x = bget('dict')"
            },
            "output": {
                "selectedType": "Table",
                "result": {
                    "type": "TableDisplay",
                    "columnNames": [
                        "with",
                        "types"
                    ],
                    "values": [
                        [
                            "different",
                            "23.2"
                        ]
                    ]
                },
                "elapsedTime": 181
            }
        },
        {
            "id": "codeIivJZa",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "x$types"
            },
            "output": {
                "selectedType": "Text",
                "result": "[1] 23.2",
                "elapsedTime": 123
            }
        },
        {
            "id": "codeni81R3",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "bset('x', 99)"
            },
            "output": {
                "selectedType": "Text",
                "result": "[1] 99",
                "elapsedTime": 73
            }
        },
        {
            "id": "code6O8IcJ",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "# these need to be added to our dependencies\ninstall.packages('RCurl',,'http://cran.us.r-project.org')\ninstall.packages('RJSONIO',,'http://cran.us.r-project.org')"
            },
            "output": {
                "selectedType": "Text",
                "result": "NULL",
                "elapsedTime": 7088
            }
        },
        {
            "id": "sectioneI1Ews",
            "type": "section",
            "title": "Javascript via HTTP",
            "level": 2,
            "collapsed": true
        },
        {
            "id": "markdownBpTbyn",
            "type": "markdown",
            "body": "This is the hard way to do javascript. Â but perhaps if we are forced to move the namespace to the server, then it will be the std way.",
            "mode": "preview"
        },
        {
            "id": "code301W1U",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "// this is the wrong way, since the values live locally, no need to go over http but we can...\nbeaker.get = function(vr, cb) {\n  $.get('http://127.0.0.1:8801/beaker/rest/namespace/get?name=' + vr,\n          function(result) {\n            cb(result.value);\n          });\n}"
            },
            "output": {
                "selectedType": "Hidden"
            }
        },
        {
            "id": "codeyTX1fJ",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "// can't get return result of notebook namespace because js has no way to convert async value to sync\nbeaker.get('x', function(r){console.log(r);})\n// the value is printed on the console but only after the cell evaluates to undefined"
            },
            "output": {
                "selectedType": "Text",
                "result": "undefined"
            }
        },
        {
            "id": "sectionL13RxX",
            "type": "section",
            "title": "Javascript Locally",
            "level": 2,
            "collapsed": false
        },
        {
            "id": "codeVksxuS",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "// this is the right way, requires a bit of a hack now\nnamespace.dict.with"
            },
            "output": {
                "selectedType": "Text",
                "result": "different"
            }
        },
        {
            "id": "codeoz5hcp",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "// this works too\nnamespace.x = 101;"
            },
            "output": {
                "selectedType": "Text",
                "result": "101"
            }
        },
        {
            "id": "codeUBLWO2",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "console.log(namespace)"
            },
            "output": {
                "selectedType": "Text",
                "result": "undefined"
            }
        }
    ],
    "namespace": {
        "x": "99",
        "y": "999",
        "s": "hi momx",
        "i": 99,
        "d": 99.9,
        "dict": {
            "with": "different",
            "types": 23.2
        },
        "b": true
    }
}

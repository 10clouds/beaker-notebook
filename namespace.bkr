{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "shellID": null,
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "shellID": null,
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "shellID": "773672DDAC6E4D9385AD288986C4A7F9",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python",
                    "background": "#EAEAFF"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "shellID": null,
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "shellID": "bb8cdfd3-5fb0-4823-9dc6-05f7be6de3b0",
            "view": {
                "cm": {
                    "mode": "r",
                    "background": "#C0CFF0"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "Notebook Namespace",
            "collapsed": false
        },
        {
            "id": "markdowneNyWKM",
            "type": "markdown",
            "body": "Implementation and experimentation towards https://github.com/twosigma/beaker-notebook/issues/89",
            "mode": "preview"
        },
        {
            "id": "sectionk4CosY",
            "type": "section",
            "title": "Python",
            "level": 2,
            "collapsed": false
        },
        {
            "id": "code001",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "import os, urllib, urllib2, json, pandas, yaml\n\nclass DataFrameEncoder(json.JSONEncoder):\n    def default(self, obj):\n      \t# similarly handle Series, Panels, .... ?\n        if type(obj) == pandas.core.frame.DataFrame:\n            return obj.to_dict(outtype='list')\n        return json.JSONEncoder.default(self, obj)\n        \nurl = '127.0.0.1:' + os.environ['beaker_core_port']\npassword_mgr = urllib2.HTTPPasswordMgrWithDefaultRealm()\npassword_mgr.add_password(None, url, 'beaker', os.environ['beaker_core_password'])\nhandler = urllib2.HTTPBasicAuthHandler(password_mgr)\nopener = urllib2.build_opener(handler)\nurllib2.install_opener(opener)\n\ndef bset4(var, val, unset, sync):\n    args = {'name': var, 'session':_beaker_session_id, 'sync':sync}\n    if not unset:\n      args['value'] = json.dumps(val, cls=DataFrameEncoder)\n    req = urllib2.Request('http://' + url + '/rest/namespace/set', urllib.urlencode(args))\n    conn = urllib2.urlopen(req)\n    conn.read()\n\ndef bset(var, val):\n    bset4(var, val, False, True)\n\n# returns before it completes\ndef bset_fast(var, val):\n    bset4(var, val, False, False)\n\n# remove a var from the namespace\ndef bunset(var):\n    bset4(var, None, True, True)\n  \ndef bget(var):\n    req = urllib2.Request('http://' + url + '/rest/namespace/get?' + \n                          urllib.urlencode({'name': var, 'session':_beaker_session_id}))\n    conn = urllib2.urlopen(req)\n    result = yaml.load(conn.read()) # would use json.loads but it returns unicode\n    return result['value']\n"
            },
            "output": {
                "selectedType": "Hidden",
                "result": "",
                "outputArrived": false,
                "elapsedTime": 285
            }
        },
        {
            "id": "codeHcaNw0",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "bset('s', \"hi momx\")\nbset('u', u'hi momx') # unicode not recovered properly XXX\nbset('b', True)\nbset('i', 99)\nbset('d', 99.9)\nbset('dict', {'with': 'different', 'types': 23.2})\nbset('n', None)"
            },
            "output": {
                "selectedType": "Hidden",
                "result": "",
                "outputArrived": false,
                "elapsedTime": 1856
            }
        },
        {
            "id": "codeP6hk18",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "bset_fast('s', \"hi momx\")"
            },
            "output": {
                "selectedType": "Hidden",
                "result": "",
                "outputArrived": false,
                "elapsedTime": 60
            }
        },
        {
            "id": "codeuuRBrq",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "df = pandas.DataFrame([[1, 2], [1, 3], [4, 7]], columns=['A', 'X'])\nbset('df', df)"
            },
            "output": {
                "selectedType": "Hidden",
                "result": "",
                "outputArrived": false,
                "elapsedTime": 59
            }
        },
        {
            "id": "code7nNp8F",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "df"
            },
            "output": {
                "selectedType": "Table",
                "result": {
                    "type": "TableDisplay",
                    "tableDisplayModel": {
                        "columnNames": [
                            "",
                            "A",
                            "B"
                        ],
                        "values": [
                            [
                                "0",
                                " 1",
                                " 2"
                            ],
                            [
                                "1",
                                " 1",
                                " 3"
                            ],
                            [
                                "2",
                                " 4",
                                " 6"
                            ]
                        ]
                    },
                    "columnNames": [
                        "",
                        "A",
                        "B"
                    ],
                    "values": [
                        [
                            "0",
                            " 1",
                            " 2"
                        ],
                        [
                            "1",
                            " 1",
                            " 3"
                        ],
                        [
                            "2",
                            " 4",
                            " 6"
                        ]
                    ]
                },
                "outputArrived": true,
                "elapsedTime": 1018
            }
        },
        {
            "id": "codelummfm",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "pandas.DataFrame(bget('df'))"
            },
            "output": {
                "selectedType": "Table",
                "result": {
                    "type": "TableDisplay",
                    "tableDisplayModel": {
                        "columnNames": [
                            "",
                            "A",
                            "X"
                        ],
                        "values": [
                            [
                                "0",
                                " 1",
                                " 2"
                            ],
                            [
                                "1",
                                " 1",
                                " 3"
                            ],
                            [
                                "2",
                                " 4",
                                " 7"
                            ]
                        ]
                    },
                    "columnNames": [
                        "",
                        "A",
                        "X"
                    ],
                    "values": [
                        [
                            "0",
                            " 1",
                            " 2"
                        ],
                        [
                            "1",
                            " 1",
                            " 3"
                        ],
                        [
                            "2",
                            " 4",
                            " 7"
                        ]
                    ]
                },
                "outputArrived": true,
                "elapsedTime": 248
            }
        },
        {
            "id": "codeTjxnIM",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "bget('dict')"
            },
            "output": {
                "selectedType": "BeakerDisplay",
                "result": {
                    "type": "BeakerDisplay",
                    "innertype": "Html",
                    "object": "<div class=\"out_prompt_overlay prompt\" title=\"click to expand output; double click to hide output\" style=\"display: none;\"></div><div class=\"output\" style=\"display: none;\"></div><div class=\"btn output_collapsed\" title=\"click to expand output\" style=\"display: none;\">. . .</div><div class=\"output_subarea output_text\"><pre>{'types': 23.2, 'with': 'different'}</pre></div>"
                },
                "outputArrived": true,
                "elapsedTime": 73
            }
        },
        {
            "id": "codeyUiPr5",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": "bunset('x')"
            },
            "output": {
                "selectedType": "Hidden",
                "result": "",
                "outputArrived": false,
                "elapsedTime": 50
            }
        },
        {
            "id": "sectionso97Zp",
            "type": "section",
            "title": "R",
            "level": 2,
            "collapsed": false
        },
        {
            "id": "code2uVtKX",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "library(RCurl)\nlibrary(RJSONIO)\n\npwarg = paste('beaker:',Sys.getenv(\"beaker_core_password\"),sep='')\n\nbset4 <- function(var, val, unset, sync) {\n  req = paste('http://127.0.0.1:',Sys.getenv(\"beaker_core_port\"),\n           '/rest/namespace/set', sep='')\n  opts = list(userpwd=pwarg, httpauth = AUTH_BASIC)\n  if (unset) {\n    postForm(req, style='POST', name=var, session=beaker_session_id_, sync=sync, .opts=opts)\n  } else {\n    postForm(req, style='POST', name=var, value=toJSON(val), session=beaker_session_id_, sync=sync, .opts=opts)\n  }\n  return (val)\n}\n\nbset <- function(var, val) {\n  return (bset4(var, val, FALSE, TRUE))\n}\n\nbunset <- function(var) {\n  return (bset4(var, NULL, TRUE, TRUE))\n}\n\n# returns before it completes\nbset_fast <- function(var, val) {\n  return (bset4(var, val, FALSE, FALSE))\n}\n\nbget <- function(var) {\n  req = paste('http://127.0.0.1:',Sys.getenv(\"beaker_core_port\"),\n              '/rest/namespace/get?name=', var, '&session=', beaker_session_id_, sep='')\n  res = getURL(req, userpwd=pwarg, httpauth = AUTH_BASIC)\n  return (fromJSON(res)$value)\n}"
            },
            "output": {
                "selectedType": "Hidden",
                "result": "",
                "elapsedTime": 87
            }
        },
        {
            "id": "codeaR6jnD",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "x = bget('df')"
            },
            "output": {
                "selectedType": "Table",
                "result": {
                    "type": "TableDisplay",
                    "columnNames": [
                        "A",
                        "X"
                    ],
                    "values": [
                        [
                            "1.0",
                            "2.0"
                        ],
                        [
                            "1.0",
                            "3.0"
                        ],
                        [
                            "4.0",
                            "7.0"
                        ]
                    ]
                },
                "elapsedTime": 293
            }
        },
        {
            "id": "codeIivJZa",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "bget('dict')$types"
            },
            "output": {
                "selectedType": "Text",
                "result": "[1] 23.2",
                "elapsedTime": 93
            }
        },
        {
            "id": "codeni81R3",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "bset_fast('x', 97)"
            },
            "output": {
                "selectedType": "Text",
                "result": "[1] 97",
                "elapsedTime": 92
            }
        },
        {
            "id": "codem8rXff",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "DF = data.frame(x=c(\"x\",\"b\",\"b\",\"a\",\"a\"),v=rnorm(5))\nbset('dfr', DF)"
            },
            "output": {
                "selectedType": "Table",
                "result": {
                    "type": "TableDisplay",
                    "columnNames": [
                        "x",
                        "v"
                    ],
                    "values": [
                        [
                            "x",
                            "-0.5288252532931688"
                        ],
                        [
                            "b",
                            "-0.09407272210395479"
                        ],
                        [
                            "b",
                            "0.24182106453497812"
                        ],
                        [
                            "a",
                            "-0.7757393637412534"
                        ],
                        [
                            "a",
                            "-2.4876491930130427"
                        ]
                    ]
                },
                "elapsedTime": 1061
            }
        },
        {
            "id": "code6O8IcJ",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "# these need to be added to our dependencies\ninstall.packages('RCurl',,'http://cran.us.r-project.org')\ninstall.packages('RJSONIO',,'http://cran.us.r-project.org')"
            },
            "output": {
                "selectedType": "Text",
                "result": "NULL",
                "elapsedTime": 14344
            }
        },
        {
            "id": "code6jrtY7",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": "bunset('x')"
            },
            "output": {
                "selectedType": "Text",
                "result": "NULL",
                "elapsedTime": 107
            }
        },
        {
            "id": "sectioneI1Ews",
            "type": "section",
            "title": "Javascript via HTTP",
            "level": 2,
            "collapsed": true
        },
        {
            "id": "code301W1U",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "// this is the wrong way, since the values live locally, no need to go over http but we can...\nbeaker.get = function(vr, cb) {\n  $.get('http://127.0.0.1:8801/beaker/rest/namespace/get?name=' + vr,\n          function(result) {\n            cb(result.value);\n          });\n}"
            },
            "output": {
                "selectedType": "Hidden"
            }
        },
        {
            "id": "codeyTX1fJ",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "// can't get return result of notebook namespace because js has no way to convert async value to sync\nbeaker.get('x', function(r){console.log(r);})\n// the value is printed on the console but only after the cell evaluates to undefined"
            },
            "output": {
                "selectedType": "Text",
                "result": "undefined"
            }
        },
        {
            "id": "sectionL13RxX",
            "type": "section",
            "title": "Javascript Locally",
            "level": 2,
            "collapsed": false
        },
        {
            "id": "codeVksxuS",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "// this is the right way, requires a bit of a hack now\nnamespace.dict.types"
            },
            "output": {
                "selectedType": "Text",
                "result": "23.2"
            }
        },
        {
            "id": "codewfnoWY",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "namespace.x"
            },
            "output": {
                "selectedType": "Hidden",
                "result": ""
            }
        },
        {
            "id": "codeoz5hcp",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "// this works too\nnamespace.x = 101;"
            },
            "output": {
                "selectedType": "Text",
                "result": "101"
            }
        },
        {
            "id": "codeUBLWO2",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": "console.log(namespace)"
            },
            "output": {
                "selectedType": "Text",
                "result": "undefined"
            }
        }
    ],
    "namespace": {
        "y": {
            "with": "different",
            "types": 23.2
        },
        "s": "hi momx",
        "i": 99,
        "d": 99.9,
        "dict": {
            "with": "different",
            "types": 23.2
        },
        "b": true,
        "df": {
            "A": [
                1,
                1,
                4
            ],
            "X": [
                2,
                3,
                7
            ]
        },
        "dfr": {
            "x": [
                "x",
                "b",
                "b",
                "a",
                "a"
            ],
            "v": [
                -0.52883,
                -0.094073,
                0.24182,
                -0.77574,
                -2.4876
            ]
        },
        "u": "hi momx",
        "n": null
    }
}

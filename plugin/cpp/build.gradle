/*
 *  Copyright 2014 TWO SIGMA OPEN SOURCE, LLC
 *
 *  Licensed under the Apache License, Version 2.0 (the "License");
 *  you may not use this file except in compliance with the License.
 *  You may obtain a copy of the License at
 *
 *         http://www.apache.org/licenses/LICENSE-2.0
 *
 *  Unless required by applicable law or agreed to in writing, software
 *  distributed under the License is distributed on an "AS IS" BASIS,
 *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *  See the License for the specific language governing permissions and
 *  limitations under the License.
 */
apply plugin: 'java'

repositories {
  mavenCentral()
}

apply plugin:'application'
mainClassName = 'com.twosigma.beaker.cpp.Main'

configurations {
  provided
  antlr
  compile.extendsFrom provided
}

task makeCRunLib(type: Exec, dependsOn: ['compileCppEvaluator', 'makeCppEvaluatorHeader']) {
  inputs.file('./src/main/cpp/CRun.cpp')
  outputs.file('./src/main/cpp/libCRun.jnilib')
  workingDir './src/main/cpp'
 // commandLine 'clang++', '-m64', '-shared', '-fPIC', '--std=c++11', '-I', '/System/Library/Frameworks/JavaVM.framework/Headers', '-I', 'llvm/tools/clang/include', '-I', '/usr/local/opt/llvm/include', '-I', 'llvm-build/include', '-o', 'libCRun.jnilib', 'CRun.cpp', '`/usr/local/opt/llvm/bin/llvm-config --cxxflags`', '-D__STDC_CONSTANT_MACROS', '-D__STDC_LIMIT_MACROS'
 //commandLine 'make', 'all'
 commandLine 'clang++', '-m64', '-shared', '-fPIC', '--std=c++11', '-I', '/System/Library/Frameworks/JavaVM.framework/Headers', '-o', 'libCRun.jnilib', 'CRun.cpp'
}

task copyCRun(type: Copy, dependsOn: ['installApp', 'makeCRunLib']) {
  from './src/main/cpp/libCRun.jnilib'
  into evalPluginDir.getAbsolutePath() + '/cpp/lib'
}

task compileCppEvaluator(type: JavaCompile) {
  classpath = files(project(':plugin:jvm').projectDir)
  source 'com.twosigma.beaker.cpp.utils.CppEvaluator'
}

task makeCppEvaluatorHeader(type: Exec, dependsOn: compileCppEvaluator) {
  workingDir './build/classes/main'
  def jvmDir = project(':plugin:jvm').projectDir
  commandLine 'javah', '-cp', "./:${jvmDir}/build/classes/main", '-jni', '-o', '../../../src/main/cpp/CppEvaluator.h', 'com.twosigma.beaker.cpp.utils.CppEvaluator'
  //commandLine 'ls', 'com/twosigma/beaker/cpp/utils'
  //commandLine 'printenv'
  //commandLine 'echo', "${jvmDir}"
}

dependencies {
  provided project(':plugin:jvm')
  compile group: 'org.abstractmeta', name: 'compilation-toolbox', version: '0.3.2'
}

dependencies {
  compile group: 'org.antlr', name: 'antlr4-runtime', version: '4.5'
  antlr group : 'org.antlr', name :'antlr4', version: '4.5'
  provided project(':plugin:jvm')
  compile group: 'org.abstractmeta', name: 'compilation-toolbox', version: '0.3.2'
}

task antlr4_java(type: JavaExec) {
    main = "org.antlr.v4.Tool"
    workingDir = "src/main/antlr4/"
    args = ["CPP14.g4", "-o", "../java/com/twosigma/beaker/cpp/autocomplete","-listener", "-no-visitor", "-package", "com.twosigma.beaker.cpp.autocomplete", "-encoding", "UTF-8" ]
    classpath =  configurations.antlr
}

compileJava.dependsOn antlr4_java

compileJava {
  options.compilerArgs << '-Xlint:deprecation'
  options.compilerArgs << '-Xlint:unchecked'
}

if (hasProperty('evalPluginDir')) {
  installApp.into new File(evalPluginDir, 'cpp')
  installApp.finalizedBy copyCRun
}

if (hasProperty('includeDepsInJar')) {
  build.dependsOn jar
  jar {
    // need to remove META-INF/*.SF to use this.
    from {
       (configurations.compile - configurations.provided).collect { it.isDirectory() ? it : zipTree(it).matching{exclude{it.path.contains('META-INF') || it.path.contains('google')} } }
    } {
      exclude "META-INF/*.SF"
      exclude "META-INF/*.DSA"
      exclude "META-INF/*.RSA"
    }
  }
}

task realclean
realclean.dependsOn(clean)
// should also remove 
// Java.tokens JavaBaseListener.java JavaLexer.java JavaLexer.tokens JavaListener.java JavaParser.java       

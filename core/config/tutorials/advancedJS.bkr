{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "imports": "com.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "sectionUlfnWB",
            "type": "section",
            "title": "Notebook Control Via JavaScript",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownRJMPdg",
            "type": "markdown",
            "body": [
                "JavaScript cell evaluation can use asynchronous callbacks to retrieve resources and perform other operations. Beaker supports this through the use of deferred object and promises.",
                "If a cell returns a deferred or a promise object, the client will wait for it to be resolved or rejected before considering the cell evaluation complete.",
                "For example the following code uses deferred and promises and timeouts to simulate long running asynchronous operations:",
                ""
            ],
            "evaluatorReader": false,
            "mode": "preview"
        },
        {
            "id": "codetdETS1",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "var d = bkHelper.newDeferred();",
                    "var count = 0;",
                    "",
                    "var operation = function() {",
                    "  count+=5;",
                    "  beaker.showProgressUpdate(count);",
                    "  if(count>=100) {",
                    "     d.resolve(\"FINISHED finally\");",
                    "  }",
                    "  else {",
                    "    bkHelper.timeout(operation,500);",
                    "  }",
                    "}",
                    "",
                    "bkHelper.timeout(operation,500);",
                    "",
                    "d"
                ]
            },
            "output": {
                "state": {},
                "result": "FINISHED finally",
                "selectedType": "Text"
            },
            "evaluatorReader": true,
            "lineCount": 17
        },
        {
            "id": "markdownQGj4kS",
            "type": "markdown",
            "body": [
                "You can control other notebook cells from a JavaScript code cell by using the bkHelper object. Supported operations include:",
                "",
                "* evaluating a single named cell",
                "",
                "* evaluate all cells written in a language",
                "",
                "* evaluating tagged cells",
                "",
                "* evaluating \"on the fly\" code in any language and fetch the output result",
                "",
                "All these operations return a promise that will be fulfilled once the computation is finished. For example this code evaluates a groovy expression and processes its result.",
                ""
            ],
            "evaluatorReader": false,
            "mode": "preview"
        },
        {
            "id": "codeaZA46g",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "var d = bkHelper.newDeferred();",
                    "bkHelper.evaluateCode(\"Groovy\",\"1+3\").then(",
                    "  function (r) { d.resolve(r*5); }",
                    ")",
                    "",
                    "d"
                ]
            },
            "output": {
                "state": {},
                "result": "20",
                "selectedType": "Text",
                "elapsedTime": 7189
            },
            "evaluatorReader": true,
            "lineCount": 6
        },
        {
            "id": "markdownApqMJ6",
            "type": "markdown",
            "body": [
                "Code cells are assigned an internal name when created, but you can set a specific name by using the \"Cell Options\" menu. You can also tag cells with space separated keywords to create groups of cells.",
                "",
                "The following example will execute all cells (in any language) that are tagged with \"mytag\":",
                ""
            ],
            "evaluatorReader": false,
            "mode": "preview"
        },
        {
            "id": "codezSGiYV",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "bkHelper.evaluate(\"mytag\")",
                    "\"finished\""
                ]
            },
            "output": {
                "state": {},
                "result": "finished",
                "selectedType": "Text"
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "codePLMc93",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "\"this cell is also evaluated\""
                ]
            },
            "output": {
                "result": "this cell is also evaluated",
                "selectedType": "Text",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1,
            "tags": "mytag"
        },
        {
            "id": "codeQSVv2P",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "\"this cell is NOT evaluated\""
                ]
            },
            "output": {
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "code3FNleS",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "\"this cell is evaluated\""
                ]
            },
            "output": {
                "state": {},
                "result": "this cell is evaluated",
                "selectedType": "Text",
                "elapsedTime": 82
            },
            "evaluatorReader": true,
            "lineCount": 1,
            "tags": "mytag"
        }
    ],
    "namespace": {}
}

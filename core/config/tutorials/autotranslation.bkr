{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            },
            "imports": "com.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate"
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "Autotranslation: communicating among languages",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "textNi07gO",
            "type": "text",
            "body": [
                "<div>Beaker can autotranslate variables in one language to another. &nbsp;You can access this feature with the notebook namespace: a collection of variables and their values stored in the notebook. &nbsp;You can use this to produce data in one language, and consume or process it in another.</div><div><br></div><div>Because the namespace is in the notebook, the variable's values are preserved when you save a notebook to disk, or share it on the web. &nbsp;The format for data interchange is JSON.</div><div><br></div><div>The four languages that are supported are IPython, R, Groovy, and JavaScript.</div>"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeMXyZnW",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "beaker.x = \"Strings work fine\""
                ]
            },
            "output": {
                "selectedType": "Hidden",
                "outputArrived": false,
                "elapsedTime": 343,
                "state": {},
                "pluginName": "IPython",
                "shellId": "8EB4F652C93346C18D802119845D536D"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeGNNbIg",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.x"
                ]
            },
            "output": {
                "selectedType": "Text",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "text8CJDEu",
            "type": "text",
            "body": [
                "In R you need to call a function:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "code4NkMTF",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('x')"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 586,
                "state": {},
                "pluginName": "R",
                "shellId": "d67ef95b-e97a-4aca-bab1-8c22c5bc768e",
                "dataresult": "Strings work fine"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textqT83Q0",
            "type": "text",
            "body": [
                "In Groovy, you can either call a function, or access the namespace as properties:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeL7598T",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.get('x') + beaker.x"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 604,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "48f41f17-c39a-4207-9dee-13c136cfb7b1"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "text9L6SMV",
            "type": "text",
            "body": [
                "Nested data structures and arrays are supported:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeuP2kh6",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.y = {a:1, b:2.2, c:\"three\", d:[4, 5, 6]};"
                ]
            },
            "output": {
                "selectedType": "Text",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeeLdoVF",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.y"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 600,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "48f41f17-c39a-4207-9dee-13c136cfb7b1"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionWXeHmf",
            "type": "section",
            "title": "Scalars in R",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "text3lTKGy",
            "type": "text",
            "body": [
                "A quirk of the R language is that there are no scalars, everything is a vector. &nbsp;So \"10\" is really an array of length one, written \"[10]\" in most other languages.&nbsp;<div>Beaker takes care of the situation by silently transforming vectors of length 1 to scalars when these are returned as results of an evaluation.</div><div>Scalars imported to R from the notebook namespace are transformed into vectors.</div>"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeEh6ibk",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::set('z', 12)"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 580,
                "state": {},
                "pluginName": "R",
                "shellId": "d67ef95b-e97a-4aca-bab1-8c22c5bc768e",
                "dataresult": 12
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeNydW3I",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "beaker.z"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Text",
                "elapsedTime": 220,
                "state": {},
                "pluginName": "IPython",
                "shellId": "8EB4F652C93346C18D802119845D536D"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "code3eQahz",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.z * 2"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Text",
                "elapsedTime": 590,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "48f41f17-c39a-4207-9dee-13c136cfb7b1"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textA2RUxj",
            "type": "text",
            "body": [
                "In reverse, it has no problems translating scalars from other languages to R vectors:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeKBVTUw",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.zz = 13"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 577,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "48f41f17-c39a-4207-9dee-13c136cfb7b1"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeOU5Hsk",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('zz')"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 574,
                "state": {},
                "pluginName": "R",
                "shellId": "d67ef95b-e97a-4aca-bab1-8c22c5bc768e",
                "dataresult": 13
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "section21LFDr",
            "type": "section",
            "title": "Data Frames",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "textRAPjY4",
            "type": "text",
            "body": [
                "An important complex structure in R and Python's Pandas library is the Data Frame, essentially a table with named columns. &nbsp;They go through autotranslation like so:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codetsCQ0F",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "import pandas",
                    "beaker.df = pandas.DataFrame(np.random.randn(6, 4), columns=list('ABCD'))"
                ]
            },
            "output": {
                "outputArrived": false,
                "selectedType": "Hidden",
                "elapsedTime": 309,
                "state": {},
                "pluginName": "IPython",
                "shellId": "8EB4F652C93346C18D802119845D536D"
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "text8tNp2l",
            "type": "text",
            "body": [
                "In JVM based languages, which lack a Data Frame type, they are internally represented as a Table Display object:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeKUuJGm",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "def o = beaker.df",
                    "System.out.println(o.getClass().getName())",
                    "o"
                ]
            },
            "output": {
                "selectedType": "Results",
                "elapsedTime": 633,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "48f41f17-c39a-4207-9dee-13c136cfb7b1"
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "textT2NWWl",
            "type": "text",
            "body": [
                "Auto-translating a data frame between languages that support if (such as R and Python) is fully automatic."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codej0d66h",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('df')"
                ]
            },
            "output": {
                "selectedType": "Table",
                "elapsedTime": 701,
                "state": {},
                "pluginName": "R",
                "shellId": "d67ef95b-e97a-4aca-bab1-8c22c5bc768e"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeIkZtDp",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::set('df2', data.frame(matrix(rnorm(20), nrow=10)))"
                ]
            },
            "output": {
                "selectedType": "Table",
                "elapsedTime": 570,
                "state": {},
                "pluginName": "R",
                "shellId": "d67ef95b-e97a-4aca-bab1-8c22c5bc768e"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeNYJvKz",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "print type(beaker.df2)",
                    "beaker.df2"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Results",
                "elapsedTime": 311,
                "state": {},
                "pluginName": "IPython",
                "shellId": "8EB4F652C93346C18D802119845D536D"
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "markdownScGaZR",
            "type": "markdown",
            "body": [
                "Auto detected (and auto converted) data types that can be returned and/or stored in the beaker namespace are:",
                "* integers",
                "* floats and doubles",
                "* booleans",
                "* strings",
                "* dates and time",
                "* data frames - which are displayed using a data table",
                "* list of dictionaries of basic types - which are displayed using a data table",
                "* two dimensional array of basic types (matrix) - which are displayed using a data table",
                "* multi dimensional array of any supported data type",
                "* dictionary of basic types - which are displayed using a Key/Value data table",
                "* Beaker plots (JVM languages only)",
                "* Beaker Image (JVM language only)",
                "* Beaker OutputContainer - used to display multiple data from a cell",
                "* BeakerCodeCell",
                "* any containers of any supported type",
                "",
                ""
            ],
            "evaluatorReader": false
        }
    ],
    "namespace": {
        "x": "Strings work fine",
        "y": {
            "a": 1,
            "b": 2.2,
            "c": "three",
            "d": [
                4,
                5,
                6
            ]
        },
        "z": 12,
        "zz": 13,
        "df": {
            "values": [
                [
                    -0.8682032304921652,
                    -0.01572105077852163,
                    0.6202163981945918,
                    -0.23635696634330527
                ],
                [
                    -0.5551688151268797,
                    0.22658269302115472,
                    -0.005730711422324884,
                    -0.4077862672551507
                ],
                [
                    -2.2981856449076585,
                    1.6348391860928642,
                    0.21693891451748598,
                    -1.7581808942506352
                ],
                [
                    0.15951996502807503,
                    -1.2744930312146727,
                    1.1392615420520948,
                    0.2390393451857066
                ],
                [
                    0.45680207687221147,
                    -0.3213719333689673,
                    -1.1094524249872988,
                    0.36760772071684056
                ],
                [
                    -0.4824216065310473,
                    -0.17941299942779163,
                    1.6787530578882737,
                    1.361207420800429
                ]
            ],
            "subtype": "TableDisplay",
            "type": "TableDisplay",
            "types": [
                "double",
                "double",
                "double",
                "double"
            ],
            "columnNames": [
                "A",
                "B",
                "C",
                "D"
            ]
        },
        "df2": {
            "type": "TableDisplay",
            "subtype": "TableDisplay",
            "columnNames": [
                "X1",
                "X2"
            ],
            "values": [
                [
                    1.5256,
                    0.90513
                ],
                [
                    -0.013351,
                    -1.3565
                ],
                [
                    0.091082,
                    -1.6425
                ],
                [
                    -1.0396,
                    -0.012614
                ],
                [
                    0.89461,
                    0.86492
                ],
                [
                    0.52191,
                    0.55019
                ],
                [
                    -0.8063,
                    -1.055
                ],
                [
                    0.21362,
                    -1.0764
                ],
                [
                    -1.9298,
                    0.79415
                ],
                [
                    2.3056,
                    2.0903
                ]
            ],
            "types": [
                "double",
                "double"
            ]
        }
    }
}

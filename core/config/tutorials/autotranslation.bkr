{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            },
            "imports": "com.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate"
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "Autotranslation: communicating among languages",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "textNi07gO",
            "type": "text",
            "body": [
                "<div>Beaker can autotranslate variables in one language to another. &nbsp;You can access this feature with the notebook namespace: a collection of variables and their values stored in the notebook.&nbsp;</div><div>You can use this to produce data in one language, and consume or process it in another.</div><div><br></div><div>Because the namespace is in the notebook, the variable's values are preserved when you save a notebook to disk, or share it on the web. &nbsp;The format for data interchange is JSON.</div><div><br></div><div>The four languages that are supported are IPython, R, Groovy, and JavaScript.</div>"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeMXyZnW",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "beaker.x = \"Strings work fine\""
                ]
            },
            "output": {
                "selectedType": "Hidden",
                "outputArrived": false,
                "elapsedTime": 343,
                "state": {},
                "pluginName": "IPython",
                "shellId": "5F4685CA65614566921154FC327B0859"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeGNNbIg",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.x"
                ]
            },
            "output": {
                "selectedType": "Text",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "text8CJDEu",
            "type": "text",
            "body": [
                "In R you need to call a function:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "code4NkMTF",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('x')"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 641,
                "state": {},
                "pluginName": "R",
                "shellId": "7a4abf6a-fcf1-456d-9945-166ae1430509",
                "dataresult": "Strings work fine"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textqT83Q0",
            "type": "text",
            "body": [
                "In Groovy, you can either call a function, or access the namespace as properties:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeL7598T",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.get('x') + beaker.x"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 2021,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "a521cc90-ff33-4f17-b4fd-de79e09cec49"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "text9L6SMV",
            "type": "text",
            "body": [
                "Nested data structures and arrays are supported:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeuP2kh6",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.y = {a:1, b:2.2, c:\"three\", d:[4, 5, 6]};"
                ]
            },
            "output": {
                "selectedType": "Text",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeeLdoVF",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.y"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 607,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "a521cc90-ff33-4f17-b4fd-de79e09cec49"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionWXeHmf",
            "type": "section",
            "title": "Scalars in R",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "text3lTKGy",
            "type": "text",
            "body": [
                "A quirk of the R language is that there are no scalars, everything is a vector. &nbsp;So \"10\" is really an array of length one, written \"[10]\" in most other languages.&nbsp;<div>Beaker takes care of the situation by silently transforming vectors of length 1 to scalars when these are returned as results of an evaluation.</div><div>Scalars imported to R from the notebook namespace are transformed into vectors.</div>"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeEh6ibk",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::set('z', 12)"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 588,
                "state": {},
                "pluginName": "R",
                "shellId": "7a4abf6a-fcf1-456d-9945-166ae1430509",
                "dataresult": 12
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeNydW3I",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "beaker.z"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Html",
                "elapsedTime": 218,
                "state": {},
                "pluginName": "IPython",
                "shellId": "5F4685CA65614566921154FC327B0859",
                "dataresult": 12
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "code3eQahz",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.z * 2"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Text",
                "elapsedTime": 598,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "a521cc90-ff33-4f17-b4fd-de79e09cec49"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textA2RUxj",
            "type": "text",
            "body": [
                "In reverse, it has no problems translating scalars from other languages to R vectors:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeKBVTUw",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.zz = 13"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 592,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "a521cc90-ff33-4f17-b4fd-de79e09cec49"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeOU5Hsk",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('zz')"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 573,
                "state": {},
                "pluginName": "R",
                "shellId": "7a4abf6a-fcf1-456d-9945-166ae1430509",
                "dataresult": 13
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "section21LFDr",
            "type": "section",
            "title": "Data Frames",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "textRAPjY4",
            "type": "text",
            "body": [
                "An important complex structure in R and Python's Pandas library is the Data Frame, essentially a table with named columns. &nbsp;They go through autotranslation like so:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codetsCQ0F",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "import pandas",
                    "beaker.df = pandas.DataFrame(np.random.randn(6, 4), columns=list('ABCD'))"
                ]
            },
            "output": {
                "outputArrived": false,
                "selectedType": "Hidden",
                "elapsedTime": 327,
                "state": {},
                "pluginName": "IPython",
                "shellId": "5F4685CA65614566921154FC327B0859"
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "text8tNp2l",
            "type": "text",
            "body": [
                "In JVM based languages, which lack a Data Frame type, they are internally represented as a Table Display object:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeKUuJGm",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "def o = beaker.df",
                    "System.out.println(o.getClass().getName())",
                    "o"
                ]
            },
            "output": {
                "selectedType": "Results",
                "elapsedTime": 645,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "a521cc90-ff33-4f17-b4fd-de79e09cec49"
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "textT2NWWl",
            "type": "text",
            "body": [
                "Auto-translating a data frame between languages that support it (such as R and Python) is fully automatic."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codej0d66h",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('df')"
                ]
            },
            "output": {
                "selectedType": "Table",
                "elapsedTime": 581,
                "state": {},
                "pluginName": "R",
                "shellId": "7a4abf6a-fcf1-456d-9945-166ae1430509"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeIkZtDp",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::set('df2', data.frame(matrix(rnorm(20), nrow=10)))"
                ]
            },
            "output": {
                "selectedType": "Table",
                "elapsedTime": 686,
                "state": {},
                "pluginName": "R",
                "shellId": "7a4abf6a-fcf1-456d-9945-166ae1430509"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeNYJvKz",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "print type(beaker.df2)",
                    "beaker.df2"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Results",
                "elapsedTime": 291,
                "state": {},
                "pluginName": "IPython",
                "shellId": "5F4685CA65614566921154FC327B0859"
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "markdownFAMSnm",
            "type": "markdown",
            "body": [
                "Beaker provides a DataFrame object in Javascript as well: it mimics the Python Pandas version with a minimal set of functions:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeMVbQlE",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.df2.toString()"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Text"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "markdownScGaZR",
            "type": "markdown",
            "body": [
                "Auto detected (and auto converted) data types that can be returned and/or stored in the beaker namespace are:",
                "* integers",
                "* floats and doubles",
                "* booleans",
                "* strings",
                "* dates and time",
                "* data frames - which are displayed using a data table",
                "* list of dictionaries of basic types - which are displayed using a data table",
                "* two dimensional array of basic types (matrix) - which are displayed using a data table",
                "* multi dimensional array of any supported data type",
                "* dictionary of basic types - which are displayed using a Key/Value data table",
                "* Beaker plots (JVM languages only)",
                "* Beaker Image (JVM language only)",
                "* Beaker OutputContainer - used to display multiple data from a cell",
                "* BeakerCodeCell",
                "* any containers of any supported type",
                "",
                ""
            ],
            "evaluatorReader": false
        }
    ],
    "namespace": {
        "x": "Strings work fine",
        "y": {
            "a": 1,
            "b": 2.2,
            "c": "three",
            "d": [
                4,
                5,
                6
            ]
        },
        "z": 12,
        "zz": 13,
        "df": {
            "values": [
                [
                    1.0679469896336005,
                    1.3292468417131746,
                    -0.8385469036804384,
                    -1.295763694109285
                ],
                [
                    -1.2082966131811432,
                    -0.10265628703467547,
                    -0.5403241897516972,
                    0.15905268445670043
                ],
                [
                    0.09262075099295038,
                    -0.3057224072597163,
                    -0.13386812421207822,
                    -1.4428401626288077
                ],
                [
                    -0.3035627473525138,
                    1.223240608316643,
                    -1.3364409977568859,
                    0.22492419050720677
                ],
                [
                    -1.2445707133055304,
                    1.4548793980090793,
                    0.4723209689958721,
                    1.0324390472220037
                ],
                [
                    -0.14706027027978888,
                    -0.15154125864614834,
                    -1.1394481983135107,
                    -0.045388609652781305
                ]
            ],
            "subtype": "TableDisplay",
            "type": "TableDisplay",
            "types": [
                "double",
                "double",
                "double",
                "double"
            ],
            "columnNames": [
                "A",
                "B",
                "C",
                "D"
            ]
        },
        "df2": {
            "type": "TableDisplay",
            "subtype": "TableDisplay",
            "values": [
                [
                    -0.060086,
                    -0.7352
                ],
                [
                    -0.48288,
                    0.77935
                ],
                [
                    0.32808,
                    -1.9715
                ],
                [
                    -0.43688,
                    -0.24699
                ],
                [
                    2.1272,
                    0.22844
                ],
                [
                    -0.79777,
                    0.56916
                ],
                [
                    -1.3479,
                    0.42665
                ],
                [
                    1.8303,
                    0.19718
                ],
                [
                    -2.5711,
                    1.2995
                ],
                [
                    -0.16066,
                    0.024612
                ]
            ],
            "types": [
                "double",
                "double"
            ],
            "columnNames": [
                "X1",
                "X2"
            ]
        }
    }
}

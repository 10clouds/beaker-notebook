{
    "beaker": "2",
    "evaluators": [
        {
            "name": "Html",
            "plugin": "Html",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "Latex",
            "plugin": "Latex",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "R",
            "plugin": "R",
            "view": {
                "cm": {
                    "mode": "r"
                }
            }
        },
        {
            "name": "Groovy",
            "plugin": "Groovy",
            "view": {
                "cm": {
                    "mode": "groovy"
                }
            },
            "imports": "com.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.xychart.*\ncom.twosigma.beaker.chart.xychart.plotitem.*\ncom.twosigma.beaker.NamespaceClient\ncom.twosigma.beaker.BeakerProgressUpdate"
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "Autotranslation: communicating among languages",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "textNi07gO",
            "type": "text",
            "body": [
                "<div>Beaker can autotranslate variables in one language to another. &nbsp;You can access this feature with the notebook namespace: a collection of variables and their values stored in the notebook. &nbsp;You can use this to produce data in one language, and consume or process it in another.</div><div><br></div><div>Because the namespace is in the notebook, the variable's values are preserved when you save a notebook to disk, or share it on the web. &nbsp;The format for data interchange is JSON.</div><div><br></div><div>The four languages that are supported are IPython, R, Groovy, and JavaScript.</div>"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeMXyZnW",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "beaker.x = \"Strings work fine\""
                ]
            },
            "output": {
                "selectedType": "Hidden",
                "outputArrived": false,
                "elapsedTime": 75,
                "state": {},
                "pluginName": "IPython",
                "shellId": "8E0CF48EE93D488EB1DBFC95976DD454"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeGNNbIg",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.x"
                ]
            },
            "output": {
                "selectedType": "Text",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "text8CJDEu",
            "type": "text",
            "body": [
                "In R you need to call a function:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "code4NkMTF",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('x')"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 599,
                "state": {},
                "pluginName": "R",
                "shellId": "b2119db3-6047-43ac-9d01-17828a8dbcf5",
                "dataresult": "Strings work fine"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textqT83Q0",
            "type": "text",
            "body": [
                "In Groovy, you can either call a function, or access the namespace as properties:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeL7598T",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.get('x') + beaker.x"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 592,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "3c718cc4-9e65-489d-abb4-9a7afb76742d"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "text9L6SMV",
            "type": "text",
            "body": [
                "Nested data structures and arrays are supported:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeuP2kh6",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.y = {a:1, b:2.2, c:\"three\", d:[4, 5, 6]};"
                ]
            },
            "output": {
                "selectedType": "Text",
                "state": {}
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeeLdoVF",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.y"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 588,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "3c718cc4-9e65-489d-abb4-9a7afb76742d"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "sectionWXeHmf",
            "type": "section",
            "title": "Scalars in R",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "text3lTKGy",
            "type": "text",
            "body": [
                "A quirk of the R language is that there are no scalars, everything is a vector. &nbsp;So \"10\" is really an array of length one, written \"[10]\" in most other languages.&nbsp;<div>Beaker takes care of the situation by silently transforming vectors of length 1 to scalars when these are returned as results of an evaluation.</div><div>Scalars imported to R from the notebook namespace are transformed into vectors.</div>"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeEh6ibk",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::set('z', 12)"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 567,
                "state": {},
                "pluginName": "R",
                "shellId": "b2119db3-6047-43ac-9d01-17828a8dbcf5",
                "dataresult": 12
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeNydW3I",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "beaker.z"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Html",
                "elapsedTime": 96,
                "state": {},
                "pluginName": "IPython",
                "shellId": "8E0CF48EE93D488EB1DBFC95976DD454"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textZQtpZU",
            "type": "text",
            "body": [
                "To access it as a scalar, just index out the first element:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "code3eQahz",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.z * 2"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Text",
                "elapsedTime": 565,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "3c718cc4-9e65-489d-abb4-9a7afb76742d"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textA2RUxj",
            "type": "text",
            "body": [
                "In reverse, it has no problems translating scalars from other languages to R:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeKBVTUw",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.zz = 13"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 576,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "3c718cc4-9e65-489d-abb4-9a7afb76742d"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeOU5Hsk",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('zz')"
                ]
            },
            "output": {
                "selectedType": "Text",
                "elapsedTime": 570,
                "state": {},
                "pluginName": "R",
                "shellId": "b2119db3-6047-43ac-9d01-17828a8dbcf5",
                "dataresult": 13
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "section21LFDr",
            "type": "section",
            "title": "Data Frames",
            "level": 2,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "textRAPjY4",
            "type": "text",
            "body": [
                "An important complex structure in R and Python's Pandas library is the Data Frame, essentially a table with named columns. &nbsp;They go through autotranslation like so:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codetsCQ0F",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "import pandas",
                    "beaker.df = pandas.DataFrame(np.random.randn(6, 4), columns=list('ABCD'))"
                ]
            },
            "output": {
                "outputArrived": false,
                "selectedType": "Hidden",
                "elapsedTime": 63,
                "state": {},
                "pluginName": "IPython",
                "shellId": "8E0CF48EE93D488EB1DBFC95976DD454"
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "text8tNp2l",
            "type": "text",
            "body": [
                "In languages without a Data Frame type, they show up as a dictionary of arrays:"
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeKUuJGm",
            "type": "code",
            "evaluator": "Groovy",
            "input": {
                "body": [
                    "beaker.df"
                ]
            },
            "output": {
                "selectedType": "Table",
                "elapsedTime": 590,
                "state": {},
                "pluginName": "Groovy",
                "shellId": "3c718cc4-9e65-489d-abb4-9a7afb76742d"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textT2NWWl",
            "type": "text",
            "body": [
                "Auto-translating a data frame to R is fully automatic."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codej0d66h",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::get('df')"
                ]
            },
            "output": {
                "selectedType": "Table",
                "elapsedTime": 623,
                "state": {},
                "pluginName": "R",
                "shellId": "b2119db3-6047-43ac-9d01-17828a8dbcf5"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeIkZtDp",
            "type": "code",
            "evaluator": "R",
            "input": {
                "body": [
                    "beaker::set('df2', data.frame(matrix(rnorm(20), nrow=10)))"
                ]
            },
            "output": {
                "selectedType": "Table",
                "elapsedTime": 592,
                "state": {},
                "pluginName": "R",
                "shellId": "b2119db3-6047-43ac-9d01-17828a8dbcf5"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeNYJvKz",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "pandas.DataFrame(beaker.df2)"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "BeakerDisplay",
                "elapsedTime": 1539,
                "state": {},
                "pluginName": "IPython",
                "shellId": "8E0CF48EE93D488EB1DBFC95976DD454"
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "textJi6Elj",
            "type": "text",
            "body": [
                "We are considering how to more automatically detect complex types, and also how to allow the user to define their own types. &nbsp;Again, your feedback is appreciated."
            ],
            "evaluatorReader": false
        }
    ],
    "namespace": {
        "x": "Strings work fine",
        "y": {
            "a": 1,
            "b": 2.2,
            "c": "three",
            "d": [
                4,
                5,
                6
            ]
        },
        "z": 12,
        "zz": 13,
        "df": {
            "values": [
                [
                    1.2444446151476676,
                    -1.5686448812346288,
                    0.12327495220896395,
                    0.8803664648524792
                ],
                [
                    0.46416779607696174,
                    -0.4651128982529294,
                    -0.36775167714427176,
                    -1.2600596722130224
                ],
                [
                    -0.666151927308202,
                    -0.6747184415681339,
                    -0.43865026704136,
                    0.4269571275806415
                ],
                [
                    -0.33006394126381144,
                    -0.869157213143733,
                    -0.39797072851262943,
                    0.5785854291100263
                ],
                [
                    -0.8706195635367554,
                    1.522373516870626,
                    -1.0084893193747364,
                    0.16851980117665152
                ],
                [
                    0.35197987885526216,
                    0.8777050515392416,
                    -0.03241679833184477,
                    1.3218615404791134
                ]
            ],
            "columnNames": [
                "A",
                "B",
                "C",
                "D"
            ],
            "type": "TableDisplay",
            "types": [
                "float64",
                "float64",
                "float64",
                "float64"
            ],
            "subtype": "TableDisplay"
        },
        "df2": {
            "type": "TableDisplay",
            "subtype": "TableDisplay",
            "columnNames": [
                "X1",
                "X2"
            ],
            "values": [
                [
                    1.2243,
                    -0.29327
                ],
                [
                    -0.26271,
                    0.62639
                ],
                [
                    -0.99858,
                    1.1232
                ],
                [
                    0.15118,
                    -0.24182
                ],
                [
                    1.1534,
                    0.33172
                ],
                [
                    1.256,
                    0.47873
                ],
                [
                    -1.0016,
                    2.2816
                ],
                [
                    0.70664,
                    -0.49103
                ],
                [
                    -1.4406,
                    -0.82407
                ],
                [
                    -0.84996,
                    0.12649
                ]
            ],
            "types": [
                "double",
                "double"
            ]
        }
    }
}

{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "TeX",
            "plugin": "TeX",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        },
        {
            "name": "Clojure",
            "plugin": "Clojure",
            "view": {
                "cm": {
                    "mode": "text/x-clojure"
                }
            },
            "imports": "java.lang.Integer\ncom.twosigma.beaker.chart.Color\ncom.twosigma.beaker.chart.Filter\ncom.twosigma.beaker.BeakerProgressUpdate\ncom.twosigma.beaker.NamespaceClient",
            "classPath": "",
            "requirements": "clojure.java.io\n[clojure.repl :as repl]"
        }
    ],
    "cells": [
        {
            "id": "sectionc43Qpl",
            "type": "section",
            "title": "Clojure Examples",
            "level": 1,
            "evaluatorReader": false,
            "collapsed": false
        },
        {
            "id": "markdownvJAVkY",
            "type": "markdown",
            "body": [
                "[Clojure](http://clojure.org/) is a dialect of Lisp that runs in the JVM.",
                "It shares with Lisp the code-as-data philosophy and a powerful macro system.",
                "Clojure is predominantly a functional programming language, and features a rich set of immutable, persistent data structures.",
                "When mutable state is needed, Clojure offers a software transactional memory system and reactive Agent system that ensure clean, correct, multithreaded designs.",
                "Clojure comes built-in to Beaker so it should just work."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codekDi1Jf",
            "type": "code",
            "evaluator": "Clojure",
            "input": {
                "body": [
                    "(str \"clojure-version: \" (clojure-version))"
                ],
                "hidden": true
            },
            "output": {
                "state": {},
                "result": "clojure-version: 1.7.0",
                "selectedType": "Text",
                "pluginName": "Clojure",
                "shellId": "1f95ec56-bd59-4319-9337-fecadc93d856",
                "elapsedTime": 358
            },
            "evaluatorReader": true,
            "lineCount": 1,
            "initialization": true
        },
        {
            "id": "codejnXAl6",
            "type": "code",
            "evaluator": "Clojure",
            "input": {
                "body": [
                    "; lazy infinite sequence with recursive definition",
                    "(def fib-seq-lazy ",
                    "  ((fn rfib [a b] ",
                    "     (lazy-seq (cons a (rfib b (+ a b)))))",
                    "   0 1))",
                    "(take 20 fib-seq-lazy)"
                ]
            },
            "output": {
                "state": {},
                "result": [
                    0,
                    1,
                    1,
                    2,
                    3,
                    5,
                    8,
                    13,
                    21,
                    34,
                    55,
                    89,
                    144,
                    233,
                    377,
                    610,
                    987,
                    1597,
                    2584,
                    4181
                ],
                "selectedType": "Text",
                "pluginName": "Clojure",
                "shellId": "515e184c-7748-4276-b704-f4b943017cec",
                "elapsedTime": 91
            },
            "evaluatorReader": true,
            "lineCount": 6
        },
        {
            "id": "codextC4q9",
            "type": "code",
            "evaluator": "Clojure",
            "input": {
                "body": [
                    "; 'unless' cannot be defined with a function because",
                    "; it does not always evaluate both its arguments.",
                    "(defmacro unless [pred a b]",
                    "  `(if (not ~pred) ~a ~b))",
                    "(unless false (println \"Will print\") (println \"Will not print\"))"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "Will print\r\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Clojure",
                "shellId": "515e184c-7748-4276-b704-f4b943017cec",
                "elapsedTime": 81
            },
            "evaluatorReader": true,
            "lineCount": 5
        },
        {
            "id": "markdownQ7NY0y",
            "type": "markdown",
            "body": [
                "In this example a vector of references to vectors is created, each containing (initially sequential) unique numbers. Then a set of threads are started that repeatedly select two random positions in two random vectors and swap them, in a transaction. No special effort is made to prevent the inevitable conflicts other than the use of transactions."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeHnlYry",
            "type": "code",
            "evaluator": "Clojure",
            "input": {
                "body": [
                    "(defn run [nvecs nitems nthreads niters]",
                    "  (let [vec-refs (vec (map (comp ref vec)",
                    "                           (partition nitems (range (* nvecs nitems)))))",
                    "        swap #(let [v1 (rand-int nvecs)",
                    "                    v2 (rand-int nvecs)",
                    "                    i1 (rand-int nitems)",
                    "                    i2 (rand-int nitems)]",
                    "                (dosync",
                    "                 (let [temp (nth @(vec-refs v1) i1)]",
                    "                   (alter (vec-refs v1) assoc i1 (nth @(vec-refs v2) i2))",
                    "                   (alter (vec-refs v2) assoc i2 temp))))",
                    "        report #(do",
                    "                 (prn (map deref vec-refs))",
                    "                 (println \"Distinct:\"",
                    "                          (count (distinct (apply concat (map deref vec-refs))))))]",
                    "    (report)",
                    "    (dorun (apply pcalls (repeat nthreads #(dotimes [_ niters] (swap)))))",
                    "    (report)))",
                    "; When run, we see no values get lost or duplicated in the shuffle.",
                    "; There are 36 distinct numbers before and after. ",
                    "(run 6 6 6 100000)"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "([0 1 2 3 4 5] [6 7 8 9 10 11] [12 13 14 15 16 17] [18 19 20 21 22 23] [24 25 26 27 28 29] [30 31 32 33 34 35])\r\nDistinct: 36\r\n"
                        },
                        {
                            "type": "out",
                            "value": "([11 20 5 32 34 33] [2 26 23 12 22 24] [17 21 28 4 35 18] [30 27 15 9 31 1] [14 19 16 7 8 3] [10 0 13 29 6 25])\r\nDistinct: 36\r\n"
                        }
                    ]
                },
                "selectedType": "Results",
                "pluginName": "Clojure",
                "shellId": "515e184c-7748-4276-b704-f4b943017cec",
                "elapsedTime": 4116
            },
            "evaluatorReader": true,
            "lineCount": 21
        },
        {
            "id": "markdown5s9uAI",
            "type": "markdown",
            "body": [
                "Autotranslation examples.",
                ">**(beaker :set** *name* *value* **)**<br />",
                ">**(beaker :get** *name* **)**"
            ],
            "evaluatorReader": false
        },
        {
            "id": "code6t053X",
            "type": "code",
            "evaluator": "Clojure",
            "input": {
                "body": [
                    "(beaker :set \"binary_table\" ",
                    "        (for [i (range 2) j (range 2) k (range 2) l (range 2)] ",
                    "          [(str i j k l) (java.lang.Integer/toHexString (java.lang.Integer/parseInt (str i j k l) 2))]))"
                ]
            },
            "output": {
                "state": {},
                "selectedType": "Hidden",
                "pluginName": "Clojure",
                "shellId": "5a5c53cf-ea47-4fc1-89aa-b040197c188f",
                "elapsedTime": 704
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codepKxxJX",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.binary_table"
                ]
            },
            "output": {
                "state": {
                    "datatablestate": {
                        "pagination": {
                            "use": true,
                            "rowsToDisplay": 50,
                            "fixLeft": false,
                            "fixRight": false
                        },
                        "columnNames": [
                            "c0",
                            "c1"
                        ],
                        "actualalign": [
                            "L",
                            "L"
                        ],
                        "colorder": [
                            0,
                            1,
                            2
                        ],
                        "getCellSho": [
                            true,
                            true
                        ]
                    }
                },
                "result": {
                    "type": "TableDisplay",
                    "values": [
                        [
                            "0000",
                            "0"
                        ],
                        [
                            "0001",
                            "1"
                        ],
                        [
                            "0010",
                            "2"
                        ],
                        [
                            "0011",
                            "3"
                        ],
                        [
                            "0100",
                            "4"
                        ],
                        [
                            "0101",
                            "5"
                        ],
                        [
                            "0110",
                            "6"
                        ],
                        [
                            "0111",
                            "7"
                        ],
                        [
                            "1000",
                            "8"
                        ],
                        [
                            "1001",
                            "9"
                        ],
                        [
                            "1010",
                            "a"
                        ],
                        [
                            "1011",
                            "b"
                        ],
                        [
                            "1100",
                            "c"
                        ],
                        [
                            "1101",
                            "d"
                        ],
                        [
                            "1110",
                            "e"
                        ],
                        [
                            "1111",
                            "f"
                        ]
                    ],
                    "subtype": "Matrix",
                    "columnNames": [
                        "c0",
                        "c1"
                    ],
                    "types": [
                        "string",
                        "string"
                    ]
                },
                "selectedType": "Table",
                "pluginName": "JavaScript",
                "elapsedTime": 31
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codeEg02vp",
            "type": "code",
            "evaluator": "JavaScript",
            "input": {
                "body": [
                    "beaker.person = [{firstName:\"John\", lastName:\"Doe\", age:46}, {firstName:\"Amanda\", lastName:\"Smith\", age:23}]"
                ]
            },
            "output": {
                "state": {
                    "datatablestate": {
                        "pagination": {
                            "use": true,
                            "rowsToDisplay": 50,
                            "fixLeft": false,
                            "fixRight": false
                        },
                        "columnNames": [
                            "firstName",
                            "lastName",
                            "age"
                        ],
                        "actualalign": [
                            "L",
                            "L",
                            "R"
                        ],
                        "colorder": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "getCellSho": [
                            true,
                            true,
                            true
                        ]
                    }
                },
                "result": {
                    "type": "TableDisplay",
                    "subtype": "ListOfMaps",
                    "columnNames": [
                        "firstName",
                        "lastName",
                        "age"
                    ],
                    "values": [
                        [
                            "John",
                            "Doe",
                            46
                        ],
                        [
                            "Amanda",
                            "Smith",
                            23
                        ]
                    ],
                    "types": [
                        "string",
                        "string",
                        "double"
                    ]
                },
                "selectedType": "Table",
                "pluginName": "JavaScript",
                "elapsedTime": 29
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codevrWKiV",
            "type": "code",
            "evaluator": "Clojure",
            "input": {
                "body": [
                    "(((beaker :get \"person\") 1) \"firstName\")"
                ]
            },
            "output": {
                "state": {},
                "result": "Amanda",
                "selectedType": "Text",
                "pluginName": "Clojure",
                "shellId": "5a5c53cf-ea47-4fc1-89aa-b040197c188f",
                "elapsedTime": 764
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "codehipCQw",
            "type": "code",
            "evaluator": "Clojure",
            "input": {
                "body": [
                    "(beaker :get \"person\")"
                ]
            },
            "output": {
                "state": {
                    "datatablestate": {
                        "pagination": {
                            "use": true,
                            "rowsToDisplay": 50,
                            "fixLeft": false,
                            "fixRight": false
                        },
                        "columnNames": [
                            "firstName",
                            "lastName",
                            "age"
                        ],
                        "actualalign": [
                            "L",
                            "L",
                            "R"
                        ],
                        "colorder": [
                            0,
                            1,
                            2,
                            3
                        ],
                        "getCellSho": [
                            true,
                            true,
                            true
                        ]
                    }
                },
                "result": {
                    "type": "TableDisplay",
                    "columnNames": [
                        "firstName",
                        "lastName",
                        "age"
                    ],
                    "values": [
                        [
                            "John",
                            "Doe",
                            46
                        ],
                        [
                            "Amanda",
                            "Smith",
                            23
                        ]
                    ],
                    "types": [
                        "string",
                        "string",
                        "integer"
                    ],
                    "subtype": "ListOfMaps"
                },
                "selectedType": "Table",
                "pluginName": "Clojure",
                "shellId": "5a5c53cf-ea47-4fc1-89aa-b040197c188f",
                "elapsedTime": 675
            },
            "evaluatorReader": true,
            "lineCount": 1
        },
        {
            "id": "markdownuhE671",
            "type": "markdown",
            "body": [
                "Example of using the clojure \"require\" in the plugin settings."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeDTkrHj",
            "type": "code",
            "evaluator": "Clojure",
            "input": {
                "body": [
                    "(repl/apropos \"println\")"
                ]
            },
            "output": {
                "state": {},
                "result": [
                    "clojure.core/println",
                    "clojure.core/println-str"
                ],
                "selectedType": "Text",
                "pluginName": "Clojure",
                "shellId": "10a61776-35dc-42f1-9e8c-8f2a93efd332",
                "elapsedTime": 386
            },
            "evaluatorReader": true,
            "lineCount": 1
        }
    ],
    "namespace": {
        "binary": {
            "type": "TableDisplay",
            "values": [
                [
                    "0",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "0",
                    "0",
                    "0",
                    "1"
                ],
                [
                    "0",
                    "0",
                    "1",
                    "0"
                ],
                [
                    "0",
                    "0",
                    "1",
                    "1"
                ],
                [
                    "0",
                    "1",
                    "0",
                    "0"
                ],
                [
                    "0",
                    "1",
                    "0",
                    "1"
                ],
                [
                    "0",
                    "1",
                    "1",
                    "0"
                ],
                [
                    "0",
                    "1",
                    "1",
                    "1"
                ],
                [
                    "1",
                    "0",
                    "0",
                    "0"
                ],
                [
                    "1",
                    "0",
                    "0",
                    "1"
                ],
                [
                    "1",
                    "0",
                    "1",
                    "0"
                ],
                [
                    "1",
                    "0",
                    "1",
                    "1"
                ],
                [
                    "1",
                    "1",
                    "0",
                    "0"
                ],
                [
                    "1",
                    "1",
                    "0",
                    "1"
                ],
                [
                    "1",
                    "1",
                    "1",
                    "0"
                ],
                [
                    "1",
                    "1",
                    "1",
                    "1"
                ]
            ],
            "subtype": "Matrix",
            "columnNames": [
                "c0",
                "c1",
                "c2",
                "c3"
            ],
            "types": [
                "string",
                "string",
                "string",
                "string"
            ]
        },
        "person": {
            "type": "TableDisplay",
            "subtype": "ListOfMaps",
            "columnNames": [
                "firstName",
                "lastName",
                "age"
            ],
            "values": [
                [
                    "John",
                    "Doe",
                    46
                ],
                [
                    "Amanda",
                    "Smith",
                    23
                ]
            ],
            "types": [
                "string",
                "string",
                "double"
            ]
        },
        "binary_table": {
            "type": "TableDisplay",
            "values": [
                [
                    "0000",
                    "0"
                ],
                [
                    "0001",
                    "1"
                ],
                [
                    "0010",
                    "2"
                ],
                [
                    "0011",
                    "3"
                ],
                [
                    "0100",
                    "4"
                ],
                [
                    "0101",
                    "5"
                ],
                [
                    "0110",
                    "6"
                ],
                [
                    "0111",
                    "7"
                ],
                [
                    "1000",
                    "8"
                ],
                [
                    "1001",
                    "9"
                ],
                [
                    "1010",
                    "a"
                ],
                [
                    "1011",
                    "b"
                ],
                [
                    "1100",
                    "c"
                ],
                [
                    "1101",
                    "d"
                ],
                [
                    "1110",
                    "e"
                ],
                [
                    "1111",
                    "f"
                ]
            ],
            "subtype": "Matrix",
            "columnNames": [
                "c0",
                "c1"
            ],
            "types": [
                "string",
                "string"
            ]
        }
    },
    "metadata": {
        "publication-id": "560b4e07-6785-4cc1-95d6-bde1ab80ff8f"
    }
}

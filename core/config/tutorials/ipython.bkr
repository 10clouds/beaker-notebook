{
    "beaker": "2",
    "evaluators": [
        {
            "name": "HTML",
            "plugin": "HTML",
            "view": {
                "cm": {
                    "mode": "htmlmixed"
                }
            }
        },
        {
            "name": "TeX",
            "plugin": "TeX",
            "view": {
                "cm": {
                    "mode": "stex"
                }
            }
        },
        {
            "name": "IPython",
            "plugin": "IPython",
            "imports": "",
            "supplementalClassPath": "",
            "view": {
                "cm": {
                    "mode": "python"
                }
            },
            "setup": "%matplotlib inline\nimport numpy\nimport matplotlib\nfrom matplotlib import pylab, mlab, pyplot\nnp = numpy\nplt = pyplot\nfrom IPython.display import display\nfrom IPython.core.pylabtools import figsize, getfigs\nfrom pylab import *\nfrom numpy import *\n"
        },
        {
            "name": "JavaScript",
            "plugin": "JavaScript",
            "jsSetting2": "",
            "jsSetting1": "",
            "view": {
                "cm": {
                    "mode": "javascript",
                    "background": "#FFE0F0"
                }
            }
        }
    ],
    "cells": [
        {
            "id": "section001",
            "type": "section",
            "level": 1,
            "title": "IPython Basics",
            "collapsed": false,
            "evaluatorReader": false
        },
        {
            "id": "markdowniaLsCe",
            "type": "markdown",
            "body": [
                "IPython is the Python language with extensions for interactivity.  Follow the instructions on BeakerNotebook.com for how to install IPython so Beaker can use it."
            ],
            "evaluatorReader": false
        },
        {
            "id": "codeaaQ9rQ",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "# you an define your own functions with the \"def\" keyword",
                    "def secant(x):",
                    "  return 1/cos(x)",
                    "",
                    "secant(6.22)"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Html",
                "elapsedTime": 224,
                "state": {},
                "result": "<div class=\"output_subarea output_text\"><pre>1.0019995175722287</pre></div>",
                "pluginName": "IPython",
                "shellId": "6CD2912EDCAB49BA880160CEE77AAA88",
                "dataresult": 1.0019995175722287,
                "height": 34
            },
            "evaluatorReader": true,
            "lineCount": 5
        },
        {
            "id": "code001",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "# add a question mark to the end of a function to get help on it",
                    "cos?"
                ]
            },
            "output": {
                "selectedType": "Html",
                "outputArrived": false,
                "elapsedTime": 482,
                "state": {},
                "result": "<pre><span  class=\"ansired\">Type:            </span>ufunc\n<span  class=\"ansired\">String form:     </span>&lt;ufunc &apos;cos&apos;&gt;\n<span  class=\"ansired\">File:            </span>~/anaconda/lib/python2.7/site-packages/numpy/__init__.py\n<span  class=\"ansired\">Docstring:</span>\ncos(x[, out])\n\nCosine element-wise.\n\nParameters\n----------\nx : array_like\n    Input array in radians.\nout : ndarray, optional\n    Output array of same shape as &#96;x&#96;.\n\nReturns\n-------\ny : ndarray\n    The corresponding cosine values.\n\nRaises\n------\nValueError: invalid return array shape\n    if &#96;out&#96; is provided and &#96;out.shape&#96; != &#96;x.shape&#96; (See Examples)\n\nNotes\n-----\nIf &#96;out&#96; is provided, the function writes the result into it,\nand returns a reference to &#96;out&#96;.  (See Examples)\n\nReferences\n----------\nM. Abramowitz and I. A. Stegun, Handbook of Mathematical Functions.\nNew York, NY: Dover, 1972.\n\nExamples\n--------\n&gt;&gt;&gt; np.cos(np.array([0, np.pi/2, np.pi]))\narray([  1.00000000e+00,   6.12303177e-17,  -1.00000000e+00])\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Example of providing the optional output parameter\n&gt;&gt;&gt; out2 = np.cos([0.1], out1)\n&gt;&gt;&gt; out2 is out1\nTrue\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Example of ValueError due to provision of shape mis-matched &#96;out&#96;\n&gt;&gt;&gt; np.cos(np.zeros((3,3)),np.zeros((2,2)))\nTraceback (most recent call last):\n  File &quot;&lt;stdin&gt;&quot;, line 1, in &lt;module&gt;\nValueError: invalid return array shape\n<span  class=\"ansired\">Class docstring:</span>\nFunctions that operate element by element on whole arrays.\n\nTo see the documentation for a specific ufunc, use np.info().  For\nexample, np.info(np.sin).  Because ufuncs are written in C\n(for speed) and linked into Python with NumPy&apos;s ufunc facility,\nPython&apos;s help() function finds this page whenever help() is called\non a ufunc.\n\nA detailed explanation of ufuncs can be found in the &quot;ufuncs.rst&quot;\nfile in the NumPy reference guide.\n\nUnary ufuncs:\n=============\n\nop(X, out=None)\nApply op to X elementwise\n\nParameters\n----------\nX : array_like\n    Input array.\nout : array_like\n    An array to store the output. Must be the same shape as &#96;X&#96;.\n\nReturns\n-------\nr : array_like\n    &#96;r&#96; will have the same shape as &#96;X&#96;; if out is provided, &#96;r&#96;\n    will be equal to out.\n\nBinary ufuncs:\n==============\n\nop(X, Y, out=None)\nApply &#96;op&#96; to &#96;X&#96; and &#96;Y&#96; elementwise. May &quot;broadcast&quot; to make\nthe shapes of &#96;X&#96; and &#96;Y&#96; congruent.\n\nThe broadcasting rules are:\n\n* Dimensions of length 1 may be prepended to either array.\n* Arrays may be repeated along dimensions of length 1.\n\nParameters\n----------\nX : array_like\n    First input array.\nY : array_like\n    Second input array.\nout : array_like\n    An array to store the output. Must be the same shape as the\n    output would have.\n\nReturns\n-------\nr : array_like\n    The return value; if out is provided, &#96;r&#96; will be equal to out.</pre>",
                "pluginName": "IPython",
                "shellId": "6CD2912EDCAB49BA880160CEE77AAA88",
                "height": 1729
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "codejQBMxF",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "%%timeit x = range(1000)",
                    "secant(x)",
                    "# magics like this one work"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Results",
                "elapsedTime": 3019,
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "10000 loops, best of 3: 64.5 Âµs per loop\n"
                        }
                    ]
                },
                "pluginName": "IPython",
                "shellId": "6CD2912EDCAB49BA880160CEE77AAA88",
                "height": 35
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codeG7urqI",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "from IPython.core.display import HTML",
                    "html_text = HTML(\"generating <em>HTML</em> with <font size='+2'>IPython</font>\")",
                    "html_text"
                ]
            },
            "output": {
                "outputArrived": true,
                "selectedType": "Html",
                "elapsedTime": 229,
                "state": {},
                "result": "<div class=\"output_subarea output_html rendered_html\">generating <em>HTML</em> with <font size=\"+2\">IPython</font></div>",
                "pluginName": "IPython",
                "shellId": "6CD2912EDCAB49BA880160CEE77AAA88",
                "height": 50
            },
            "evaluatorReader": true,
            "lineCount": 3
        },
        {
            "id": "codeHgTXDe",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "from IPython.display import Math",
                    "Math('F(k) = \\int_{-\\infty}^{\\infty} f(x) e^{2\\pi i k} dx')"
                ]
            },
            "output": {
                "state": {},
                "result": "<div class=\"output_subarea output_latex\">$$F(k) = \\int_{-\\infty}^{\\infty} f(x) e^{2\\pi i k} dx$$</div>",
                "selectedType": "Html",
                "pluginName": "IPython",
                "shellId": "6CD2912EDCAB49BA880160CEE77AAA88",
                "elapsedTime": 226,
                "height": 79
            },
            "evaluatorReader": true,
            "lineCount": 2
        },
        {
            "id": "codeBUkABL",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "import sys",
                    "for i in range(0, 5):",
                    "    print('stdout line ' + str(i))",
                    "print >> sys.stderr, 'stderr shows up in red'",
                    "'final result is black'"
                ]
            },
            "output": {
                "state": {},
                "result": {
                    "type": "Results",
                    "outputdata": [
                        {
                            "type": "out",
                            "value": "stdout line 0\nstdout line 1\nstdout line 2\nstdout line 3\nstdout line 4\n"
                        },
                        {
                            "type": "err",
                            "value": "stderr shows up in red\n"
                        }
                    ],
                    "payload": "<div class=\"output_subarea output_text\"><pre>'final result is black'</pre></div>"
                },
                "selectedType": "Results",
                "pluginName": "IPython",
                "shellId": "6CD2912EDCAB49BA880160CEE77AAA88",
                "elapsedTime": 245,
                "dataresult": "final result is black",
                "height": 131
            },
            "evaluatorReader": true,
            "lineCount": 5
        },
        {
            "id": "codeCBmwAy",
            "type": "code",
            "evaluator": "IPython",
            "input": {
                "body": [
                    "from IPython.display import Image",
                    "Image(url='http://python.org/images/python-logo.gif')"
                ]
            },
            "output": {
                "state": {},
                "result": "<div class=\"output_subarea output_html rendered_html\"><img src=\"http://python.org/images/python-logo.gif\"></div>",
                "selectedType": "Html",
                "outputArrived": true,
                "elapsedTime": 233,
                "pluginName": "IPython",
                "shellId": "6CD2912EDCAB49BA880160CEE77AAA88",
                "height": 88
            },
            "evaluatorReader": true,
            "lineCount": 2
        }
    ],
    "namespace": {},
    "metadata": {
        "publication-id": "560b5279-8469-45ae-823e-03de070213b6"
    }
}
